 1. public int dphelper(int[] jobs, int[][] dp, int days, int indx){  // indx -> point of breakage
        if(days == 1){
            int max = 0;
            while(indx < jobs.length){
                max = Math.max(max, jobs[indx++]);
            }
            return max;
        }
        
        if(dp[days][indx] != -1){
            return dp[days][indx];
        }
        
        
        int leftMax = 0;



        int res = Integer.MAX_VALUE;
        for(int i=indx; i < jobs.length - days + 1; i++){
             leftMax = Math.max(leftMax, jobs[i]);
            int rightMax = dphelper(jobs, dp, days-1, i+1);
            res = Math.min(res, leftMax + rightMax);
        }
        return dp[days][indx] = res;
    }
}


2. COUNT SORTED VOWEL STRING

class Solution {
    int a=1, e=1, i=1, o=1, u=1;
    public int countVowelStrings(int n) {
        
    	for(int j=2; j <= n; j++){
        	increment();
        }
    	return a+e+i+o+u;
    }

    private void increment() {
		a = a+e+i+o+u;
		e = e+i+o+u;
		i = i+o+u;
		o = o+u;
	} 
}


3. WORD BREAK II

class Solution {
   List<String> res = new ArrayList<>();
    public List<String> wordBreak(String s, List<String> wordDict) {
        Set<String> wordSet = new HashSet<>();
        for(String word: wordDict){
            wordSet.add(word);
        }
        helper(s, wordSet, new String());
        return res;
    }
    
    private void helper(String s, Set<String> set, String tempS){
        if(set.contains(s)){
            res.add(tempS+s);
        }
        for(int i=0;i<s.length();i++){
                String subS = s.substring(0,i);
                if(set.contains(subS)){
                    helper(s.substring(i), set, tempS+subS+" ");
                }
            
        }
    }
}




4. DOMINO AND TROMINO TILING

class Solution {
    public int numTilings(int n) {
        if(n == 1) return 1;
        else if (n == 2) return 2;
        
        int mod = 1000000007;
         int[] dp = new int[n + 1];
	            dp[1] = 1;
	            dp[2] = 2;
                dp[3] = 5;
	            for (int i = 4; i <= n; i++) {
	                dp[i] = (2 * dp[i - 1] % mod + dp[i - 3] % mod) % mod;
	            }

	            return (dp[n]) ;
    }
}


5. BEST SIGHTSEEING PAIR

class Solution {
    public int maxScoreSightseeingPair(int[] A) {
        //Intitialize previously seen value of A[i] + i
        int prev_max = A[0]+0;
		//Initialize the value of first pair
        int res =  - 1;
        for(int j = 1; j < A.length; j++){
			//update res if a higher value of prev_max+A[j]-j is found
            res = Math.max(prev_max + A[j] - j, res);
			//Update prev_max
            prev_max = Math.max(A[j] + j, prev_max);
        }
        return res;
    }
}



                                               
6. GOLDMINE PROBLEM
                                                 
import java.io.*;
import java.util.*;

public class MyClass {
	
		public static void main(String[] args) throws Exception {
		    Scanner t = new Scanner(System.in);
		    System.out.println("Enter number");
		    int n = t.nextInt();
		    int m = t.nextInt();
		    int[][] arr = new int[n][m];
		    System.out.println("Enter value");
		     
		      for (int i = 0; i < n; i++) {
		         for (int j = 0; j < m; j++) {
		            arr[i][j] = t.nextInt();
		         }
		      }

		      int[][] dp = new int[n][m];
		      for (int j = arr[0].length - 1; j >= 0; j--) {
		         for (int i = arr.length - 1; i >= 0; i--) {
		            if (j == arr[0].length - 1) {
		               dp[i][j] = arr[i][j];
		            } else if (i == arr.length - 1) {
		               dp[i][j] = arr[i][j] + Math.max(dp[i][j + 1], dp[i - 1][j + 1]);
		            } else if (i == 0) {
		               dp[i][j] = arr[i][j] + Math.max(dp[i][j + 1], dp[i + 1][j + 1]);
		            } else {
		               dp[i][j] = arr[i][j] + Math.max(dp[i][j + 1], Math.max(dp[i + 1][j + 1], dp[i - 1][j + 1]));
		            }
		         }
		      }

		      int max = dp[0][0];
		      for (int i = 1; i < dp.length; i++) {
		         max = Math.max(max, dp[i][0]);
		      }
		      System.out.println(max);
		   }

		}


7. FRIENDS PAIRING PROBLEM
                                                 
import java.io.*;
import java.util.*;

public class MyClass {
	
		public static void main(String[] args) throws Exception {
		    Scanner t = new Scanner(System.in);
		    System.out.println("Enter number");
		    int n = t.nextInt();
		    long[] dp = new long[n + 1];
		      dp[0] = 0;
		      dp[1] = 1;
		      dp[2] = 2;

		      for (int i = 3; i <= n; i++) {
		         dp[i] = dp[i - 1] + (i - 1) * dp[i - 2];
		      }

		      System.out.println(dp[n]);
		   }

		}

8. PAINT THE FENCE PROBLEM
                                                 
import java.io.*;
import java.util.*;

public class MyClass {
	  public static void main(String[] args) throws Exception {
	        Scanner t = new Scanner(System.in);
	        System.out.println("Enter the number");
	        int n = t.nextInt();
	        int k = t.nextInt();
	        
	        
	        long same = k*1;
	        long diff = k * (k-1);
	        long total = same + diff;

	        for(int i = 3; i <= n; i++){
	            same = diff * 1; // number of ways in which this fence is painted same as old fence following the rule of not more than 2.
	            diff = total * (k - 1); // number of ways in which this fence can be painted different from old fence.
	            total = same + diff; // number of ways in which this fence can be painted
	        }

	        System.out.println(total);
	    }
	}


9.  PRINT THE MINIMUM JUMPS AND ALSO PRINT ALL PATHS WITH MINIMUM JUMPS
                                                 
import java.io.*;
import java.util.*;

public class MyClass {

	
	
		 public static class Pair{
		        int i;
		        int s;
		        int j;
		        String psf;
		        Pair(int i,int s,int j, String psf){
		            this.i = i;
		            this.s = s;
		            this.j = j;
		            this.psf = psf;
		        }
		 }
		    
		           
		    public static void Solution(int arr[]){
		        Integer dp[] = new Integer[arr.length];

		         dp[dp.length-1] = 0 ;

		        for(int i = arr.length-1 ; i >= 0 ; i--){
		            int steps = arr[i];
		        
		            int min = Integer.MAX_VALUE;
		            for(int j = 1; j <= steps && i + j < arr.length; j++) {
		            	if(dp[i + j] != null && dp[i+j] < min) {
		            		min = dp[i + j];
		            	}
		            }
		            if(min != Integer.MAX_VALUE) {
		            	dp[i] = min + 1;
		            }
		         
		        }
		         System.out.println(dp[0]+" ");
		         ArrayDeque<Pair> queue = new ArrayDeque<>();
		         queue.add(new Pair(0 , arr[0], dp[0], 0 + ""));
		         
		         
		        

			        while(queue.size() > 0){
			            Pair rem = queue.removeFirst();
			            
			            if(rem.j == 0) {
			            	System.out.println(rem.psf);
			            }
			            
			            for(int j = 1; j <=rem.s && rem.i + j < arr.length; j++) {
			            	int ci = rem.i + j;
			            
			            	if(dp[ci] != null && dp[ci] == rem.j - 1) {
			            		   queue.add(new Pair(ci , arr[ci], dp[ci], rem.psf  + "->" + ci));
			       		        
			            	}
			            }
		    }
			        }

		 
		    public static void main(String []args){
		        Scanner scn = new Scanner(System.in);
		        System.out.println("Enter the number");
		        int n = scn.nextInt();

		        int arr[] = new int[n];
		        System.out.println("Enter the value");
		        for(int i = 0 ; i < n ; i++)
		            arr[i] = scn.nextInt();

		        Solution(arr);
		        scn.close();
		      
		    }
		}


10. CLIMB STAIR PATH VALUE

import java.io.*;
import java.util.*;

public class MyClass {
	           
		    public static int countPaths(int n){
		      

		        int[] dp = new int[n + 1];
		        dp[0] = 1;
		        for(int i = 1; i <= n; i++) {
		        	if(i == 1) {
		        		dp[i] = dp[i-1];
		        	} else if ( i == 2) {
		        		dp[i] = dp[i - 1] + dp[i - 2];
		        	} else {
		        		dp[i] = dp[i - 1] + dp[i - 2] + dp[ i - 3];
		        	}
		        }
		        return dp[n];
		        }

		 
		    public static void main(String []args){
		        Scanner scn = new Scanner(System.in);
		        System.out.println("Enter the number");
		        int n = scn.nextInt();

	            int cp = countPaths(n);
		        System.out.println(cp);

		    }
		}


11. CLIMB STAIR PATH VALUE WITH VARIABLE JUMPS

import java.io.*;
import java.util.*;

public class MyClass {

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      System.out.println("Enter the number");
      int n = Integer.parseInt(br.readLine());
      int[] arr = new int[n];
      System.out.println("Enter the value");
      for (int i = 0; i < arr.length; i++) {
         arr[i] = Integer.parseInt(br.readLine());
      }

      int[] dp = new int[n + 1];
      dp[n] = 1;

      for (int i = n - 1; i >= 0; i--) {
         if (arr[i] > 0) {
            for (int j = 1; j <= arr[i] && i + j < dp.length; j++) {
               dp[i] += dp[i + j];
            }
         }
      }

      System.out.println(dp[0]);
   }

}


12. MINIMUM COST IN MAZE TRAVERSAL

package automate;


import java.io.*;
import java.util.*;

public class MyClass {

	 public static void main(String[] args) throws Exception{
Scanner t = new Scanner(System.in);
		  System.out.println("Enter the value");
	    
		  int n = t.nextInt();
	      int m = t.nextInt();
	      int[][] arr = new int[n][m];
	      System.out.println("Enter the value");

	      for (int i = 0; i < n; i++) {
	         for (int j = 0; j < m; j++) {
	            arr[i][j] = t.nextInt();
	         }
	      }

	      int[][] dp = new int[n][m];
	      for(int i = arr.length - 1; i >= 0; i--){
	         for(int j = arr[0].length - 1; j >= 0; j--){
	            if(i == arr.length - 1 && j == arr[0].length - 1){
	               dp[i][j] = arr[i][j];
	            } else if(i == arr.length - 1){
	               dp[i][j] = arr[i][j] + dp[i][j + 1];
	            } else if(j == arr[0].length - 1){
	               dp[i][j] = arr[i][j] + dp[i + 1][j];
	            } else {
	               dp[i][j] = arr[i][j] + Math.min(dp[i][j + 1], dp[i + 1][j]);
	            }
	         }
	      }

	      System.out.println(dp[0][0]);
	   }

	}


13. TARGET SUM SUBSET

import java.io.*;
import java.util.*;

public class MyClass {

	 public static void main(String[] args) throws Exception{
Scanner t = new Scanner(System.in);
		  System.out.println("Enter the value");
	    
		  int n = t.nextInt();
		  int[] arr = new int[n];

	        for (int i = 0; i < n; i++) {
	            arr[i] = t.nextInt();
	        }
	        System.out.println("Enter the value");
	        int tar = t.nextInt();

	        boolean[][] dp = new boolean[arr.length + 1][tar + 1];
	        for (int i = 0; i < dp.length; i++) {
	            for (int j = 0; j < dp[0].length; j++) {
	                if (i == 0 && j == 0) {
	                    dp[i][j] = true;
	                } else if (i == 0) {
	                    dp[i][j] = false;
	                } else if (j == 0) {
	                    dp[i][j] = true;
	                } else {
	                    if(dp[i - 1][j] == true){
	                        dp[i][j] = true;
	                    } else {
	                        int val = arr[i - 1];
	                        if (j >= val && dp[i - 1][j - val] == true) {
	                            dp[i][j] = true;
	                        }
	                    }
	                }
	            }
	        }

	        System.out.println(dp[dp.length - 1][tar]);
	    }
	}



14. COUNT NO.OF SUBSET EQUAL TO TARGET

//[1,2,2,3]  tar = 3  ans = 3 because {1,2}, {1,2}, {3}

class TUF{
static int findWaysUtil(int ind, int target, int[] arr,int[][] dp){
    1 starting then if(target == 0) return 1;
                    if(ind == 0) return arr[0] == target;

     arr[0] = 0 && target == 0 then there is 2 possibility of take or not take.
     arr[0] = 5 && target == 0 then there is 1 possibility of not taking

    if(ind == 0)
        if(target == 0 && arr[0] == 0 ) return 2;
	  if(target == 0 || arr[0] == target ) return 1;
	  return 0;
    
    if(dp[ind][target]!=-1)
        return dp[ind][target];
        
    int notTaken = findWaysUtil(ind-1,target,arr,dp);
    
    int taken = 0;
    if(arr[ind]<=target)
        taken = findWaysUtil(ind-1,target-arr[ind],arr,dp);
        
    return dp[ind][target]= notTaken + taken;
}


15. COUNT PARTITION WITH GIVEN DIFFERENCE / TARGET SUM

{5,2,6,4} D =3
class TUF{
    
static int mod =(int)(Math.pow(10,9)+7);
static int countPartitionsUtil(int ind, int target,int[] arr, int[][] dp){

     if(ind == 0){
        if(target==0 && arr[0]==0)
            return 2;
        if(target==0 || target == arr[0])
            return 1;
        return 0;
    }
    
    if(dp[ind][target]!=-1)
        return dp[ind][target];
        
    int notTaken = countPartitionsUtil(ind-1,target,arr,dp);
    
    int taken = 0;
    if(arr[ind]<=target)
        taken = countPartitionsUtil(ind-1,target-arr[ind],arr,dp);
        
    return dp[ind][target]= (notTaken + taken)%mod;
}

static int countPartitions(int d,int[] arr){
    int n = arr.length;
    int totSum = 0;
    for(int i=0; i<arr.length;i++){
        totSum += arr[i];
    }
    
    //Checking for edge cases
    if(totSum-d<0) return 0;
    if((totSum-d)%2==1) return 0;
    
    int s2 = (totSum-d)/2;
    
    int dp[][] = new int[n][s2+1];
    
    for(int row[]: dp)
    Arrays.fill(row,-1);
    
    return countPartitionsUtil(n-1,s2,arr,dp);
}


16. BUY AND SELL STOCK (ONE TRANSACTION )

import java.io.*;
import java.util.*;

public class MyClass {

	 public static void main(String[] args) throws Exception{
          Scanner t = new Scanner(System.in);
		  System.out.println("Enter the value");
	    
		  int n = t.nextInt();
		   int[] prices = new int[n];
		   System.out.println("Enter the value");
		      for (int i = 0; i < prices.length; i++) {
		         prices[i] = t.nextInt();
		      }

		      int lsf = Integer.MAX_VALUE;    //  LEAST SO FAR
		      int op = 0;                     // OVERALL PROFIT
		      int pist = 0;                   // PROFIT IF SOLD TODAY
		      for(int i = 0; i < prices.length; i++){
		         if(prices[i] < lsf){
		            lsf = prices[i];
		         }

		          pist = prices[i] - lsf;
		         if(pist > op){
		            op = pist;
		         }
		      }

		      System.out.println(op);
		   }

		}


17. BUY AND SELL STOCK ( INFINITE TRANSACTION )

import java.io.*;
import java.util.*;

public class MyClass {

	 public static void main(String[] args) throws Exception{
          Scanner t = new Scanner(System.in);
		  System.out.println("Enter the value");
	    
		  int n = t.nextInt();
		   int[] arr = new int[n];
		   System.out.println("Enter the value");
		      for (int i = 0; i < arr.length; i++) {
		         arr[i] = t.nextInt();
		      }

		      int bd = 0;
		      int sd = 0;
		      int profit = 0;
		      for(int i = 1; i < arr.length; i++){
		         if(arr[i] >= arr[i - 1]){
		        	 sd++;
		         } else {
		        	 profit += arr[sd] - arr[bd];
			            bd = sd = i;
		           
		         }
		      }

		      profit += arr[sd] - arr[bd];
		      System.out.println(profit);
		   }

		}


18. BUY AND SELL STOCK  (INFINITE TRANSACTION WITH TRANSACTION FESS )

import java.io.*;
import java.util.*;

public class MyClass {

	 public static void main(String[] args) throws Exception{
          Scanner t = new Scanner(System.in);
		  System.out.println("Enter the value");
	    
		  int n = t.nextInt();
		   int[] arr = new int[n];
		   System.out.println("Enter the value");
		      for (int i = 0; i < arr.length; i++) {
		         arr[i] = t.nextInt();
		      }
		      System.out.println("Enter the value");
		      int fee = t.nextInt();

		      int obsp = -arr[0];
		      int ossp = 0;
		      for(int i = 1; i < arr.length; i++){
		         int nbsp = 0;
		         int nssp = 0;

		         if(ossp - arr[i] > obsp){
		            nbsp = ossp - arr[i];
		         } else {
		            nbsp = obsp;
		         }

		         if(obsp + arr[i] - fee > ossp){
		            nssp = obsp + arr[i] - fee;
		         } else {
		            nssp = ossp;
		         }

		         obsp = nbsp;
		         ossp = nssp;
		      }

		      System.out.println(ossp);
		   }

		}


19. BUY AND SELL STOCK WITH COOL DOWN ( INFINITE TRANSACTION )

import java.io.*;
import java.util.*;

public class MyClass {

	 public static void main(String[] args) throws Exception{
          Scanner t = new Scanner(System.in);
		  System.out.println("Enter the value");
	    
		  int n = t.nextInt();
		   int[] arr = new int[n];
		   System.out.println("Enter the value");
		      for (int i = 0; i < arr.length; i++) {
		         arr[i] = t.nextInt();
		      }
		      int obsp = -arr[0];
		      int ossp = 0;
		      int ocsp = 0;
		      for(int i = 1; i < arr.length; i++){
		         int nbsp = 0;
		         int nssp = 0;
		         int ncsp = 0;

		         if(ocsp - arr[i] > obsp){
		            nbsp = ocsp - arr[i];
		         } else {
		            nbsp = obsp;
		         }

		         if(obsp + arr[i] > ossp){
		            nssp = obsp + arr[i];
		         } else {
		            nssp = ossp;
		         }

		         if(ossp > ocsp){
		            ncsp = ossp;
		         } else {
		            ncsp = ocsp;
		         }

		         obsp = nbsp;
		         ossp = nssp;
		         ocsp = ncsp;
		      }

		      System.out.println(ossp);
		   }

		}


20. BUY AND SELL STOCK WITH TWO TRANSACTIONS

import java.io.*;
import java.util.*;

public class MyClass {

	 public static void main(String[] args) throws Exception{
          Scanner t = new Scanner(System.in);
		  System.out.println("Enter the value");
	    
		  int n = t.nextInt();
		   int[] arr = new int[n];
		   System.out.println("Enter the value");
		      for (int i = 0; i < arr.length; i++) {
		         arr[i] = t.nextInt();
		      }
		      int mpist = 0;
		      int leastsf = arr[0];
		      int[] dpl = new int[arr.length];
		      for(int i = 1; i < arr.length; i++){
		         if(arr[i] < leastsf){
		            leastsf = arr[i];
		         }
		         mpist = arr[i] - leastsf;

		         if( mpist > dpl[i - 1]){
		            dpl[i] = mpist;
		         } else {
		            dpl[i] = dpl[i - 1];
		         }
		      }

		      int mpibt = 0;
		      int maxat = arr[arr.length - 1];
		      int[] dpr = new int[arr.length];
		      for(int i = arr.length - 2; i >= 0; i--){
		         if(arr[i] > maxat){
		            maxat = arr[i];
		         }
		     
                   mpibt = maxat - arr[i];
		         if(mpibt > dpr[i + 1]){
		            dpr[i] = mpibt;
		         } else {
		            dpr[i] = dpr[i + 1];
		         }
		      }

		      int op = 0;
		      for(int i = 0; i < arr.length; i++){
		         if(dpl[i] + dpr[i] > op){
		            op = dpl[i] + dpr[i];
		         }
		      }

		      System.out.println(op);
		   }

		}


21. BUY AND SELL STOCKS WITH K TRANSACTIONS

package automate;
import java.io.*;
import java.util.*;

public class MyClass {

	 public static void main(String[] args) throws Exception{
          Scanner scn = new Scanner(System.in);
		  System.out.println("Enter the value");
	    
		  int n = scn.nextInt();
		   int[] arr = new int[n];
		   System.out.println("Enter the value");
		      for (int i = 0; i < arr.length; i++) {
		         arr[i] = scn.nextInt();
		      }
		     
		      int k = scn.nextInt();

		      int[][] dp = new int[k + 1][n];

		      for(int t = 1; t <= k; t++){
		         int max = Integer.MIN_VALUE;

		         for(int d = 1; d < arr.length; d++){
		            if(dp[t - 1][d - 1] - arr[d - 1] > max){
		               max = dp[t - 1][d - 1] - arr[d - 1];
		            }

		            if(max + arr[d] > dp[t][d - 1]){
		               dp[t][d] = max + arr[d];
		            } else {
		               dp[t][d] = dp[t][d - 1];
		            }
		         }
		      }

		      System.out.println(dp[k][n - 1]);
		   }

		}


22. COUNT BINARY STRINGS WITH NO CONSECUTIVE ZEROES

import java.io.*;
import java.util.*;

public class MyClass {

	  public static void main(String[] args) throws Exception {
	      Scanner t = new Scanner(System.in);
	      System.out.println("Enter the value");
	      int n = t.nextInt();
	      
	      int ozeroes = 1;
	      int oones = 1;
	      for(int i = 2; i <= n; i++){
	         int nzeroes = oones;
	         int nones = oones + ozeroes;

	         ozeroes = nzeroes;
	         oones = nones;
	      }

	      System.out.println(ozeroes + oones);
	   }

	}


23. ARRANGE BUILDINGS

import java.io.*;
import java.util.*;

public class MyClass {

	  public static void main(String[] args) throws Exception {
	      Scanner t = new Scanner(System.in);
	      System.out.println("Enter the value");
	      long n = t.nextInt();
	      
	      long ob = 1;
	      long os = 1;
	      for (int i = 2; i <= n; i++) {
	         long nb = os;
	         long ns = ob + os;

	         ob = nb;
	         os = ns;
	      }

	      long total = os + ob;
	      total = total * total;
	      System.out.println(total);
	   }

	}


24. FIND NTH CATALAN NUMBER

import java.io.*;
import java.util.*;

public class MyClass {
	 public static void main(String[] args) throws Exception {
	      Scanner t = new Scanner(System.in);
	      System.out.println("Enter the number");
	      int n = t.nextInt();
	      long[] dp = new long[n + 1];
	      dp[0] = 1;
	      dp[1] = 1;

	      for(int i = 2; i < dp.length; i++){
	         for(int j = 0; j < i; j++){
	            dp[i] += dp[j] * dp[i - j - 1];
	         }
	      }

	      System.out.println(dp[n]);
	   }

	}


25. MIN SQUARES (LEETCODE)

import java.io.*;
import java.util.*;

public class MyClass {
	public static int solution(int n){
		int[] dp = new int[n + 1];
		dp[0] = 0;
		dp[1] = 1;
		for(int i = 2; i <= n; i++){
		int min = Integer.MAX_VALUE;
			for(int j = 1; j * j <= i; j++){
				int rem = i -j*j;
			if(dp[rem] < min) {
				min = dp[rem];
			}
		}
			dp[i] = min + 1;
		}
		return dp[n];
	}

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		System.out.println("Enter the number");
		int n = scn.nextInt();
		System.out.println(solution(n));
	}


	
}


26. PAINT HOUSE (NO TWO CONSECUTIVE COLOR)

import java.io.*;
import java.util.*;

public class MyClass {

	   public static void main(String[] args) throws Exception {
	        Scanner t  = new Scanner (System.in);
	        System.out.println("Enter the number");
	        int n = t.nextInt();
	        System.out.println("Enter the number");
	        int[][] arr = new int[n][3];
	           for(int i = 0; i < arr.length; i++) {
	        	   for(int j = 0; j < arr[0].length; j++) {
	        		   arr[i][j] = t.nextInt();
	        	   }
	           }
	           long[][] dp = new long[n][3];
	           dp[0][0] = arr[0][0];
	           dp[0][1] = arr[0][1];
	           dp[0][2] = arr[0][2];


	        for (int i = 1; i < arr.length; i++) {
	          dp[i][0] = arr[i][0] + Math.min(dp[i-1][1], dp[i-1][2]);
	          dp[i][1] = arr[i][1] + Math.min(dp[i-1][0], dp[i-1][2]);
	          dp[i][2] = arr[i][2] + Math.min(dp[i-1][0], dp[i-1][1]);
	        }
	        long ans = Math.min(dp[n-1][0], Math.min(dp[n-1][1], dp[n-1][2]));

	        System.out.println(ans);
	    }
	} 


27. MANY COLOR

  int min = Integer.MAX_VALUE;
        int smin = Integer.MAX_VALUE;
        for(int j = 0; j < arr[0].length; j++){
            if(arr[0][j] <= min){
                smin = min;
                min = arr[0][j];
            } else if(arr[0][j] <= smin){
                smin = arr[0][j];
            }
        }

        for (int i = 1; i < arr.length; i++) {
            int cmin = Integer.MAX_VALUE;
            int csmin = Integer.MAX_VALUE;

            for(int j = 0; j < arr[0].length; j++){
                if(arr[i - 1][j] = min){
                    arr[i][j] += smin;
                } else {
                    arr[i][j] += min;
                }

                if(arr[i][j] <= cmin){
                    csmin = cmin;
                    cmin = arr[i][j];
                } else if(arr[i][j] <= csmin){
                    csmin = arr[i][j];
                }
            }

            min = cmin;
            smin = csmin;
        }

        System.out.println(min);



28. TILING WITH 2 * 1 TILE

import java.io.*;
import java.util.*;

public class MyClass {

	   public static void main(String[] args) throws Exception {
	        Scanner t  = new Scanner (System.in);
	        System.out.println("Enter the number");
	        int n = t.nextInt();
	            int[] dp = new int[n + 1];
	            dp[1] = 1;
	            dp[2] = 2;
	            for (int i = 3; i <= n; i++) {
	                dp[i] = dp[i - 1] + dp[i - 2];
	            }

	            System.out.println(dp[n]);
	        }
	    }


29. TILING WITH m * n TILE
import java.io.*;
import java.util.*;

public class MyClass {

	   public static void main(String[] args) throws Exception {
	        Scanner t  = new Scanner (System.in);
	        System.out.println("Enter the number");
	        int n = t.nextInt();
	        int m = t.nextInt();
	            int[] dp = new int[n + 1];
	            for (int i = 1; i <= n; i++) {
	                if (i < m) {
	                    dp[i] = 1;
	                } else if (i == m) {
	                    dp[i] = 2;
	                } else {
	                    dp[i] = dp[i - 1] + dp[i - m];
	                }
	            }

	            System.out.println(dp[n]);
	        }
	    }


30. PARTITION INTO SUBSET

public class MyClass {

	   public static void main(String[] args) throws Exception {
	        Scanner scn  = new Scanner (System.in);
	        System.out.println("Enter the number");
	        int n = scn.nextInt();
	        int k = scn.nextInt();
	        if (n == 0 || k == 0 || n < k) {
	            System.out.println(0);
	            return;
	         }

	         long[][] dp = new long[k + 1][n + 1];
	         for (int t = 1; t <= k; t++) {
	            for (int p = 1; p <= n; p++) {
	            	if(p < t) {
	            		dp[t][p] = 0;
	            	} else if (p == t) {
	            		dp[t][p] = 1;
	            	} else {
	            		dp[t][p] = dp[t - 1][p - 1] + t * dp[t][p - 1];
	            	}
	            }
	         }
	         
	            

	         System.out.println(dp[k][n]);
	      }

	   }


31. 0-1 KNAPSACK

class TUF{
static int knapsackUtil(int[] wt,int[] val, int ind, int W,int[][] dp){

    if(ind == 0){
        if(wt[0] <=W) return val[0];
        else return 0;
    }
    
    if(dp[ind][W]!=-1)
        return dp[ind][W];
        
    int notTaken = 0 + knapsackUtil(wt,val,ind-1,W,dp);
    
    int taken = Integer.MIN_VALUE;
    if(wt[ind] <= W)
        taken = val[ind] + knapsackUtil(wt,val,ind-1,W-wt[ind],dp);
        
    return dp[ind][W] = Math.max(notTaken,taken);
}


static int knapsack(int[] wt,int[] val, int n, int W){
    
    int dp[][]= new int[n][W+1];
    for(int row[]: dp)
    Arrays.fill(row,-1);
    return knapsackUtil(wt, val, n-1, W, dp);
}


	        int[][] dp = new int[n + 1][cap + 1];
	        for (int i = 1; i < dp.length; i++) {
	            for (int j = 1; j < dp[0].length; j++) {
	         if( j >= wts[i-1]) {
	        	 int rCap = j - wts[i-1];        //remaining balls
	        	 
	        	 if(dp[i-1][rCap] + vals[i-1] > dp[i-1][j]) {
	        		 dp[i][j] = dp[i-1][rCap] + vals[i-1];
	        	 } else {
	        		 dp[i][j] = dp[i-1][j];     //when i doesn't bat
	        	 } 
	         }  else {
	        		 dp[i][j] = dp[i-1][j];      //when i doesn't bat
	        	 }
	         }

	       } 

	        System.out.println(dp[n][cap]);
	    }
	}


32. UNBOUNDED KNAPSACK

class TUF{
static int knapsackUtil(int[] wt,int[] val, int ind, int W,int[][] dp){

    if(ind == 0){
        return ((int)(W/wt[0])) * val[0];
    }
    
    if(dp[ind][W]!=-1)
        return dp[ind][W];
        
    int notTaken = 0 + knapsackUtil(wt,val,ind-1,W,dp);
    
    int taken = Integer.MIN_VALUE;
    if(wt[ind] <= W)
        taken = val[ind] + knapsackUtil(wt,val,ind,W-wt[ind],dp);
        
    return dp[ind][W] = Math.max(notTaken,taken);
}


static int unboundedKnapsack(int n, int W, int[] val,int[] wt) {
    
    int[][] dp=new int[n][W+1];
    for(int row[]: dp)
    Arrays.fill(row,-1);
    return knapsackUtil(wt, val, n-1, W, dp);
}

	        int[] dp = new int[cap + 1];
	        dp[0] = 0;
	        for (int bagc = 1; bagc <= cap; bagc++) {
	        	int max = 0;
	            for (int i = 0; i < n; i++) {
	              if( wts[i] <= bagc) {
	            	  int rbagc = bagc - wts[i];
	            	  int rbagv = dp[rbagc];
	            	  int tbagv = rbagv + vals[i];
	            	  if (tbagv > max) {
	            		  max = tbagv;
	            	  }
	              }
	            }
	            dp[bagc] = max;
	        }

	        System.out.println(dp[cap]);
	    }
	}

33. MIN COINS NEEDED THAT SUMS UPTO TARGET WITH INFINITE SUPPLY

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n= coins.length;
    
        int[][] dp=new int[n][amount+1];

        for(int row[]: dp)
        Arrays.fill(row,-1);

        int ans =  minimumElementsUtil(coins, n-1, amount, dp);
        if(ans >= (int)Math.pow(10,9)) return -1;
        return ans;
    }
    
    public int minimumElementsUtil(int[] arr, int ind, int T, int[][] dp){
         if(ind == 0){
        if(T%arr[0] == 0) return T/arr[0];
        else return (int)Math.pow(10,9);
    }
    
    if(dp[ind][T]!=-1)
        return dp[ind][T];
        
    int notTaken = 0 + minimumElementsUtil(arr,ind-1,T,dp);
    
    int taken = (int)Math.pow(10,9);
    if(arr[ind] <= T)
        taken = 1 + minimumElementsUtil(arr,ind,T-arr[ind],dp);
        
    return dp[ind][T] = Math.min(notTaken,taken);
    }
}


34. COIN CHANGE 2

class Solution {
    public int change(int amount, int[] coins) {
         int n = coins.length;
         int dp[][]=new int[n][amount+1];
         for(int row[]: dp)
         Arrays.fill(row,-1);
        return countWaysToMakeChangeUtil(coins,n-1, amount, dp);
    }
    
     int countWaysToMakeChangeUtil(int[] arr,int ind, int T, int[][] dp){

            if(ind == 0){
                if(T%arr[0]==0)
                return 1;
                else
                return 0;
            }

            if(dp[ind][T]!=-1)
                return dp[ind][T];

            int notTaken = countWaysToMakeChangeUtil(arr,ind-1,T,dp);

            int taken = 0;
            if(arr[ind] <= T)
                taken = countWaysToMakeChangeUtil(arr,ind,T-arr[ind],dp);

            return dp[ind][T] = notTaken + taken;
        }
}




35. COIN CHANGE PERMUTATION

package automate;
import java.io.*;
import java.util.*;

public class MyClass {

	  public static void main(String[] args) throws Exception {
	       Scanner t = new Scanner(System.in);
	       System.out.println("Enter the value");
	        int n = t.nextInt();
	        
	        
	        int[] coins = new int[n];
	        System.out.println("Enter the value");
	        for (int i = 0; i < coins.length; i++) {
	            coins[i] = t.nextInt();
	        }
	        System.out.println("Enter the value");
	        int tar = t.nextInt();

	        int[] dp = new int[tar + 1];
	        dp[0] = 1;

	        for (int amt = 1; amt <= tar; amt++) {
	            for (int coin: coins) {
	                if (coin <= amt) {
	                   int ramt = amt - coin;
	                   dp[amt] += dp[ramt];
	                }
	            }
	        }

	        System.out.println(dp[tar]);
	    }
	}


36. COUNT ENCODING
	        
	        
	        int[] dp = new int[str.length()];

	     dp[0] = (str.charAt(0) == '0' ? 0 : 1);
	        
	        
	        for (int i = 1; i < dp.length; i++) {
	        	if(str.charAt(i-1) == '0' && str.charAt(i) == '0') {
	        		dp[i] = 0;
	        	} else if (str.charAt(i-1) == '0' && str.charAt(i) != '0') {
	        		dp[i] = dp[i-1];
	        	} else if (str.charAt(i-1) != '0' && str.charAt(i) == '0') {
	        		if(str.charAt(i-1) == '1' || str.charAt(i-1) == '2') {
	        			dp[i] = ( i >= 2 ? dp[i-2] : 1);
	        		} else {
	        			dp[i] = 0;
	        		}
	        	} else {
	        		if(Integer.parseInt(str.substring(i-1, i+1)) <= 26) {
	        			dp[i] = dp[i-1] + ( i >= 2 ? dp[i-2] : 1);
	        		} else {
	        			dp[i] = dp[i-1];
	        		}
	        	}
	        }
	        System.out.println(dp[str.length() - 1]);
	  }
	}



37. MAXIMUM SUM NON ADJACENT ELEMENTS
	        
	        
	        long inc = arr[0] < 0 ? 0 : arr[0];
	        long exc = 0;

	        for (int i = 1; i < arr.length; i++) {
	            long ninc = exc + arr[i];
	            long nexc = Math.max(inc, exc);

	            inc = ninc;
	            exc = nexc;
	        }

	        System.out.println(Math.max(inc, exc));
	    }
	}



		                        


	                    


	                    


	                    


	                    